# generated by https://github.com/ministryofjustice/money-to-prisoners-deploy
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0
  aws-ecr: circleci/aws-ecr@9.0

parameters:
  kubectl-version:
    type: string
    default: v1.24.16

jobs:
  build-test-push:
    executor:
      name: aws-ecr/default
      docker_layer_caching: true
    environment:
      app: cashbook
    working_directory: /tmp/repo
    steps:
      - checkout
      - run:
          name: Inspect tags
          command: |
            CIRCLE_BRANCH_LOWERCASE=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]')

            registry=${ECR_REGISTRY}/${ECR_REPOSITORY}
            version=${CIRCLE_BRANCH_LOWERCASE}.${CIRCLE_SHA1:0:7}
            tag=${app}.${version}

            echo export CIRCLE_BRANCH_LOWERCASE=${CIRCLE_BRANCH_LOWERCASE} > /tmp/mtp-env.sh
            echo export registry=${registry} >> /tmp/mtp-env.sh
            echo export version=${version} >> /tmp/mtp-env.sh
            echo export tag=${tag} >> /tmp/mtp-env.sh

            echo "Building ${tag}"
      - aws-cli/setup:
          region: ${AWS_DEFAULT_REGION}
          role_arn: ${ECR_ROLE_TO_ASSUME}
      - run:
          name: Install kubectl
          command: |
            curl -LO https://dl.k8s.io/release/<< pipeline.parameters.kubectl-version >>/bin/linux/amd64/kubectl
            echo "$(curl -L -s https://dl.k8s.io/<< pipeline.parameters.kubectl-version >>/bin/linux/amd64/kubectl.sha256) kubectl" | sha256sum --check
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client --output yaml
      - run:
          name: Log docker into ECR
          command: |
            source /tmp/mtp-env.sh
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
      - run:
          name: Pull base image
          command: |
            source /tmp/mtp-env.sh
            docker pull ${registry}:base-web
            docker tag ${registry}:base-web base-web
      - run:
          name: Build docker image
          command: |
            source /tmp/mtp-env.sh
            docker build \
              --force-rm \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              --build-arg APP_GIT_BRANCH=${CIRCLE_BRANCH} \
              --build-arg APP_BUILD_TAG=${tag} \
              --build-arg APP_BUILD_DATE=$(date +%FT%T%z) \
              --tag ${tag} \
              .
      - run:
          name: Test docker image
          command: |
            source /tmp/mtp-env.sh
            docker run \
              --name ${app} \
              -e DJANGO_SETTINGS_MODULE=mtp_cashbook.settings.ci \
              ${tag} \
              /bin/bash -c '/app/venv/bin/pip install -r requirements/ci.txt && /app/venv/bin/python manage.py test --verbosity=2'
      - run:
          name: Extract test reports
          when: always
          command: |
            source /tmp/mtp-env.sh
            docker cp ${app}:/app/reports /tmp/reports
            docker rm ${app}
      - store_artifacts:
          path: /tmp/reports
      - store_test_results:
          path: /tmp/reports
      - run:
          name: Push docker image
          command: |
            source /tmp/mtp-env.sh
            echo "Pushing ${tag} to ECR"
            docker tag ${tag} ${registry}:${tag}
            docker push ${registry}:${tag}
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              echo "Pushing ${app} to ECR (acts as latest)"
              docker tag ${tag} ${registry}:${app}
              docker push ${registry}:${app}
            fi
      - run:
          name: Log out of ECR
          command: |
            source /tmp/mtp-env.sh
            docker logout ${ECR_REGISTRY}
      - deploy:
          name: Deploy to test
          command: |
            if [[ "${CIRCLE_BRANCH}" == "main" ]]; then
              source /tmp/mtp-env.sh
              echo "Deploying to test"

              echo -n ${K8S_CLUSTER_CERT} | base64 -d > /tmp/mtp-k8s-ca.crt
              kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=/tmp/mtp-k8s-ca.crt --server=${K8S_CLUSTER_SERVER}
              kubectl config set-credentials circleci --token=${K8S_TOKEN}
              kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
              kubectl config use-context ${K8S_CLUSTER_NAME}
              IMAGE=${registry}:${tag}
              kubectl patch configmap app-versions --patch "{\"data\": {\"${app}\": \"${version}\"}}"
              kubectl patch deployment ${app} --type strategic --patch "{\"metadata\": {\"annotations\": {\"kubernetes.io/change-cause\": \"${version}\"}}, \"spec\": {\"template\": {\"spec\": {\"containers\": [{\"name\": \"app\", \"image\": \"${IMAGE}\"}], \"initContainers\": [{\"name\": \"copy-static\", \"image\": \"${IMAGE}\"}]}}}}"
            else
              echo "Not deploying to test"
            fi
      - run:
          name: Clean up ECR
          command: |
            source /tmp/mtp-env.sh
            echo "Cleaning ECR"

            delete_images() {
              if [[ "${IMAGES_TO_DELETE}" ]]; then
                AWS_ECR_ARGS=
                for IMAGE_TO_DELETE in ${IMAGES_TO_DELETE}; do
                  AWS_ECR_ARGS="${AWS_ECR_ARGS} imageDigest=${IMAGE_TO_DELETE}"
                done
                aws ecr batch-delete-image --repository-name ${ECR_REPOSITORY} --image-ids ${AWS_ECR_ARGS}
              fi
            }

            echo "Deleting untagged images"
            IMAGES_TO_DELETE=$(aws ecr list-images --repository-name ${ECR_REPOSITORY} --filter tagStatus=UNTAGGED --query 'imageIds[*].imageDigest' --output text)
            delete_images

            if [[ "${CIRCLE_BRANCH}" != "main" ]]; then
              echo "Deleting other images from branch ${CIRCLE_BRANCH}"
              IMAGES_TO_DELETE=$(aws ecr describe-images --repository-name ${ECR_REPOSITORY} --query 'imageDetails[?contains(map(&starts_with(@, '"'"${app}.${CIRCLE_BRANCH_LOWERCASE}."'"'), @.imageTags), `true`) && ! contains(@.imageTags, '"'"${tag}"'"')].imageDigest' --output text)
              delete_images
            fi

workflows:
  version: 2
  build-test-push:
    jobs:
      - build-test-push
