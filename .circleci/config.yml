version: 2.1
jobs:
  build-test-push:
    docker:
      - image: ${ECR_ENDPOINT}/prisoner-money/money-to-prisoners:deploy-tools
    environment:
      app: cashbook
    working_directory: /tmp/repo
    steps:
      - checkout
      - run:
          name: Inspect tags
          command: |
            export tag=${app}.${CIRCLE_BRANCH}.${CIRCLE_SHA1:0:7}
            echo "Building ${tag}"
            echo export registry=${ECR_ENDPOINT}/prisoner-money/money-to-prisoners > /tmp/mtp-env.sh
            echo export tag=${tag} >> /tmp/mtp-env.sh
            echo export version=${CIRCLE_BRANCH}.${CIRCLE_SHA1:0:7} >> /tmp/mtp-env.sh
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Log into ECR
          command: |
            source /tmp/mtp-env.sh
            $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
      - run:
          name: Build docker image
          command: |
            source /tmp/mtp-env.sh
            docker pull ${registry}:base-web
            docker tag ${registry}:base-web base-web
            docker build \
              --force-rm \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              --build-arg APP_GIT_BRANCH=${CIRCLE_BRANCH} \
              --build-arg APP_BUILD_TAG=${tag} \
              --build-arg APP_BUILD_DATE=$(date +%FT%T%z) \
              --tag ${tag} \
              .
      - run:
          name: Test docker image
          command: |
            source /tmp/mtp-env.sh
            docker run \
              --name ${app} \
              -e DJANGO_SETTINGS_MODULE=mtp_cashbook.settings.ci \
              ${tag} \
              /bin/bash -c 'mkdir /app/reports && /app/venv/bin/pip install -r requirements/ci.txt && /app/venv/bin/python manage.py test --verbosity=2'
            docker cp ${app}:/app/reports /tmp/reports
            docker rm ${app}
      - store_artifacts:
          path: /tmp/reports
      - store_test_results:
          path: /tmp/reports
      - run:
          name: Push docker image
          command: |
            source /tmp/mtp-env.sh
            echo "Pushing ${tag} to ECR"
            docker tag ${tag} ${registry}:${tag}
            docker push ${registry}:${tag}
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              echo "Pushing ${app} to ECR (acts as latest)"
              docker tag ${tag} ${registry}:${app}
              docker push ${registry}:${app}
            fi
      - run:
          name: Log out of ECR
          command: |
            source /tmp/mtp-env.sh
            docker logout ${ECR_ENDPOINT}
      - run:
          name: Deploy to test
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              source /tmp/mtp-env.sh
              echo "Deploying to Test"

              echo -n ${K8S_CLUSTER_CERT} | base64 -d > /tmp/mtp-k8s-ca.crt
              kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=/tmp/mtp-k8s-ca.crt --server=https://api.${K8S_CLUSTER_NAME}
              kubectl config set-credentials circleci --token=${K8S_TOKEN}
              kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
              kubectl config use-context ${K8S_CLUSTER_NAME}
              IMAGE=${registry}:${tag}
              kubectl patch configmap app-versions --patch "{\"data\": {\"${app}\": \"${version}\"}}"
              kubectl patch deployment ${app} --type strategic --patch "{\"metadata\": {\"annotations\": {\"kubernetes.io/change-cause\": \"${version}\"}}, \"spec\": {\"template\": {\"spec\": {\"containers\": [{\"name\": \"app\", \"image\": \"${IMAGE}\"}], \"initContainers\": [{\"name\": \"copy-static\", \"image\": \"${IMAGE}\"}]}}}}"
            fi
      - run:
          name: Clean up ECR
          command: |
            source /tmp/mtp-env.sh
            echo "Cleaning ECR"

            delete_images() {
              if [[ "${IMAGES_TO_DELETE}" ]]; then
                AWS_ECR_ARGS=
                for IMAGE_TO_DELETE in ${IMAGES_TO_DELETE}; do
                  AWS_ECR_ARGS="${AWS_ECR_ARGS} imageDigest=${IMAGE_TO_DELETE}"
                done
                aws ecr batch-delete-image --repository-name prisoner-money/money-to-prisoners --image-ids ${AWS_ECR_ARGS}
              fi
            }

            echo "Deleting untagged images"
            IMAGES_TO_DELETE=$(aws ecr list-images --repository-name prisoner-money/money-to-prisoners --filter tagStatus=UNTAGGED --query 'imageIds[*].imageDigest' --output text)
            delete_images

            if [[ "${CIRCLE_BRANCH}" != "master" ]]; then
              echo "Deleting other images from branch ${CIRCLE_BRANCH}"
              IMAGES_TO_DELETE=$(aws ecr describe-images --repository-name prisoner-money/money-to-prisoners --query 'imageDetails[?contains(map(&starts_with(@, '"'"${app}.${CIRCLE_BRANCH}."'"'), @.imageTags), `true`) && ! contains(@.imageTags, '"'"${tag}"'"')].imageDigest' --output text)
              delete_images
            fi
workflows:
  version: 2
  build-test-push:
    jobs:
      - build-test-push
